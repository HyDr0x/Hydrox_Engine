#version 440 core

#define SAMPLENUMBER
#define PI 3.14159265359
#define EPSILON 0.00001
#define INT32_MAX 2147483647
#define WORKGROUPSIZE 128

#include "../../HydroxShader/include/Shader/Shaderincludes/LightData.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/IndirectLightData.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/CacheData.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/CameraUBO.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/Encodings.glslh"

layout(std430, binding = 1) buffer samplingPattern
{
	vec4 samples[SAMPLENUMBER];
};

layout(location = 0) uniform sampler2DArray indirectLightPosSampler;
layout(location = 1) uniform sampler2DArray indirectLightNormalAreaSampler;
layout(location = 2) uniform sampler2DArray indirectLightLuminousFluxSampler;

layout(rgba32f, binding = 0) readonly uniform imageBuffer globalCachePositionBuffer;
layout(rgba32f, binding = 1) readonly uniform imageBuffer globalCacheNormalBuffer;
layout(r16f, binding = 2) readonly uniform imageBuffer globalCacheAreaBuffer;

layout(rgba32f, binding = 3) writeonly uniform image2D proxyLightPositionBuffer;
layout(rgba32f, binding = 4) writeonly uniform image2D proxyLightLuminousFluxBuffer;

layout(location = 3) uniform sampler2D zBuffer;

layout(location = 4) uniform uint reflectiveShadowMapNumber;

layout(location = 5) uniform uint cacheNumber;

layout(location = 6) uniform uint proxyLightTextureResolution;

vec3 project(in vec3 t, in vec3 b, in vec3 c, in vec3 p)
{
	vec3 diff = normalize(p - c);//normalization to project the point onto the hemisphere
	
	float shareT = dot(diff, t);
	float shareB = dot(diff, b);
	
	return c + t * shareT + b * shareB;
}

float calculateProjectedProxyLightArea(in vec3 cachePos, in vec3 cacheNormal, in vec3 lightDir, in float r)
{
	float cosAngle = max(dot(cacheNormal, normalize(lightDir)), 0.0);
	
	return max((r * r * cosAngle) / (r * r + dot(lightDir, lightDir)), 0.0);
}

float calculateProjectedCacheArea(in vec3 cacheDir, in vec3 cacheNormal0, in vec3 cacheNormal1, in float cacheArea)
{
	float quadCacheDistance = dot(cacheDir, cacheDir);
	cacheDir = normalize(cacheDir);
	
	float cosAngle0 = max(dot(cacheNormal0, cacheDir), 0.0);
	float cosAngle1 = max(dot(cacheNormal1, cacheDir), 0.0);
	
	return max((cacheArea * cosAngle0 * cosAngle1) / (cacheArea + PI * quadCacheDistance), 0.0);
}

float overlappingArea(in vec3 p0, in float length0, in vec3 p1, in float length1, in vec3 t, in vec3 b, inout vec2 areaHeuristicMin, inout vec2 areaHeuristicMax)
{
	vec3 diff = p1 - p0;
	
	float shareT = abs(dot(diff, t));
	float shareB = abs(dot(diff, b));
	
	float minLength = min(length0, length1) * 2.0;//use the full length of the square, not only the half
	float ax = clamp((length0 + length1) - abs(shareT), 0.0, minLength);
	float ay = clamp((length0 + length1) - abs(shareB), 0.0, minLength);
	
	areaHeuristicMin = min(areaHeuristicMin, vec2(shareT - length1, shareB - length1));
	areaHeuristicMax = max(areaHeuristicMax, vec2(shareT + length1, shareB + length1));
	
	return ax * ay;
}

void calculateVisibility(in uint cacheIndex, in CacheData cache, in vec3 Xpd, in vec3 Xpg, in vec3 Xpdq, in vec3 Xpgq, out float visibilityD, out float visibilityG)
{
	float areaD = 0.0;
	float areaG = 0.0;
	
	vec3 binormal = normalize(cross(vec3(0.267261241, 0.534522483, 0.801783725), cache.normal.xyz));
	vec3 tangent = normalize(cross(binormal, cache.normal.xyz));
	
	vec3 XpdProj = project(tangent, binormal, cache.position.xyz, Xpd);
	vec3 XpgProj = project(tangent, binormal, cache.position.xyz, Xpg);
	
	vec3 Sd = sqrt(max(Xpdq - (Xpd * Xpd), vec3(EPSILON)));
	vec3 Sg = sqrt(max(Xpgq - (Xpg * Xpg), vec3(EPSILON)));
	
	float Rd = max(Sd.x, max(Sd.y, Sd.z));
	float Rg = max(Sg.x, max(Sg.y, Sg.z));
	
	float Fpd = calculateProjectedProxyLightArea(cache.position.xyz, cache.normal.xyz, Xpd - cache.position.xyz, Rd);
	float Fpg = calculateProjectedProxyLightArea(cache.position.xyz, cache.normal.xyz, Xpg - cache.position.xyz, Rg);
	
	float diffuseSquareSideLength = sqrt(Fpd) * 0.5;
	float specularSquareSideLength = sqrt(Fpg) * 0.5;

	vec2 areaHeuristicMinD = vec2(INT32_MAX), areaHeuristicMaxD = vec2(-INT32_MAX);
	vec2 areaHeuristicMinG = vec2(INT32_MAX), areaHeuristicMaxG = vec2(-INT32_MAX);

	for(int index = 0; index < cacheNumber; index++)
	{		
		if(index != cacheIndex)
		{
			vec3 cacheNormal = normalize(decodeNormal(imageLoad(globalCacheNormalBuffer, index).xy));
			vec3 cachePos = imageLoad(globalCachePositionBuffer, index).xyz;
			
			if(dot(normalize(cachePos - cache.position.xyz), cache.normal.xyz) > 0.01)
			{
				float cacheArea = imageLoad(globalCacheAreaBuffer, index).r;
				
				float cacheAABBSideLength = 0.5 * sqrt(calculateProjectedCacheArea(cachePos - cache.position.xyz, cache.normal.xyz, cacheNormal, cacheArea));
				
				vec3 cacheProjPos = project(tangent, binormal, cache.position.xyz, cachePos);
				
				float aD = overlappingArea(XpdProj, diffuseSquareSideLength, cacheProjPos, cacheAABBSideLength, tangent, binormal, areaHeuristicMinD, areaHeuristicMaxD);
				areaD += max(0.0, (aD / Rd) * min(Rd, dot(cachePos - Xpd, normalize(cache.position.xyz - Xpd))));
				
				float aG = overlappingArea(XpgProj, specularSquareSideLength, cacheProjPos, cacheAABBSideLength, tangent, binormal, areaHeuristicMinG, areaHeuristicMaxG);
				areaG += max(0.0, (aG / Rg) * min(Rg, dot(cachePos - Xpg, normalize(cache.position.xyz - Xpg))));
			}
		}
	}
	
	areaHeuristicMinD = max(areaHeuristicMinD, vec2(-diffuseSquareSideLength, -diffuseSquareSideLength));
	areaHeuristicMaxD = min(areaHeuristicMaxD, vec2(diffuseSquareSideLength, diffuseSquareSideLength));

	areaHeuristicMinG = max(areaHeuristicMinG, vec2(-specularSquareSideLength, -specularSquareSideLength));
	areaHeuristicMaxG = min(areaHeuristicMaxG, vec2(specularSquareSideLength, specularSquareSideLength));
	
	vec2 diffD = areaHeuristicMaxD - areaHeuristicMinD;
	float proxyLightAreaD = diffD.x * diffD.y;
	areaD = min(areaD, proxyLightAreaD);
	
	vec2 diffG = areaHeuristicMaxG - areaHeuristicMinG;
	float proxyLightAreaG = diffG.x * diffG.y;
	areaG = min(areaG, proxyLightAreaG);
	
	visibilityD = Fpd >= 0.0 ? max(1.0 - areaD / Fpd, 0.0) : 0.0;
	visibilityG = Fpg >= 0.0 ? max(1.0 - areaG / Fpg, 0.0) : 0.0;
}

layout(local_size_x = WORKGROUPSIZE) in;

shared vec4 indirectLightPos[WORKGROUPSIZE];
shared vec4 indirectLightNormalArea[WORKGROUPSIZE];
shared vec4 indirectLightLuminousFlux[WORKGROUPSIZE];

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	uint cachesPerThread = uint(ceil(float(cacheNumber) / float(WORKGROUPSIZE * gl_NumWorkGroups.x)));
	uint cacheOffset = idx * cachesPerThread;
	
	if(cacheOffset >= cacheNumber)
	{
		//return;
	}
	
	for(uint i = 0; i < cachesPerThread; i++)
	{
		uint cacheIndex = i + cacheOffset;
		ivec2 texCoord = ivec2(mod(cacheIndex, proxyLightTextureResolution), cacheIndex / proxyLightTextureResolution);
	
		if(texelFetch(zBuffer, texCoord, 0).r == 0) //discard the indirect lighting where the cache is being occluded
		{
			//return;
		}

		vec3 Lod = vec3(0.0), Xpd = vec3(0.0), Xpdq = vec3(0.0);
		vec3 Log = vec3(0.0), Xpg = vec3(0.0), Xpgq = vec3(0.0);
		
		float Wgesd = 0.0;
		float Wgesg = 0.0;

		CacheData cache;
		cache.position = imageLoad(globalCachePositionBuffer, int(cacheIndex));
		vec4 cacheNormalMaterialData = imageLoad(globalCacheNormalBuffer, int(cacheIndex));
		cache.normal.xyz = normalize(decodeNormal(cacheNormalMaterialData.xy));
		
		float frd = cache.position.w / PI;
		float frg = cacheNormalMaterialData.z * (cacheNormalMaterialData.w + 2.0) / (2.0 * PI);
		
		vec3 camDir = normalize(eyePos.xyz - cache.position.xyz);

		for(uint k = 0; k < reflectiveShadowMapNumber; k++)
		{
			float validLightSamples = 0.0;
			
			const uint cacheLoops = uint(ceil(SAMPLENUMBER / WORKGROUPSIZE));
			for(uint j = 0; j < cacheLoops; j++)
			{
				uint sampleIndex = gl_LocalInvocationID.x + j * WORKGROUPSIZE;
				vec3 texCoords;
				texCoords.x = 0.5 + samples[sampleIndex].x;
				texCoords.y = 0.5 + samples[sampleIndex].y;
				texCoords.z = float(k) / float(reflectiveShadowMapNumber);
				
				indirectLightPos[gl_LocalInvocationID.x] = texture(indirectLightPosSampler, texCoords, 0);
				indirectLightNormalArea[gl_LocalInvocationID.x] = texture(indirectLightNormalAreaSampler, texCoords, 0);
				indirectLightLuminousFlux[gl_LocalInvocationID.x] = texture(indirectLightLuminousFluxSampler, texCoords, 0);
			
				memoryBarrierShared();
				barrier();
			
				for(uint l = 0; l < WORKGROUPSIZE; l++)
				{
					vec4 lightPos = indirectLightPos[l];
					vec4 lightNormalArea = indirectLightNormalArea[l];
					vec3 luminousFlux = indirectLightLuminousFlux[l].rgb;
					
					if(lightPos.w == 0.0) //cancels indirect lightsources which aren't initialized, because there is no geometry behind or lit
					{
						//continue;
					}

					validLightSamples++;

					vec3 lightNormal = normalize(lightNormalArea.xyz * 2.0 - 1.0);
					float lightArea = lightNormalArea.w;
					
					vec3 lightDir = lightPos.xyz - cache.position.xyz;
					float quadDistance = dot(lightDir, lightDir);
					lightDir = normalize(lightDir);
					
					float reflAngle = pow(max(dot(reflect(-lightDir, cache.normal.xyz), camDir), 0.0), cacheNormalMaterialData.w);
					//vec3 halfVector = (lightDir + camDir) / length(lightDir + camDir);
					//float reflAngle = max(pow(dot(halfVector, cache.normal.xyz), cacheNormalMaterialData.w), 0.00001);
					
					float F = (max(dot(lightNormal.xyz, normalize(cache.position.xyz - lightPos.xyz)), 0.0) * max(dot(cache.normal.xyz, lightDir), 0.0)) / (lightArea + PI * quadDistance);
					
					float Wd = F;
					float Wg = reflAngle * F;
					
					Xpd += Wd * lightPos.xyz;
					Xpg += Wg * lightPos.xyz;
					
					Xpdq += Wd * lightPos.xyz * lightPos.xyz;
					Xpgq += Wg * lightPos.xyz * lightPos.xyz;
					
					Lod += luminousFlux * frd * F;
					Log += luminousFlux * frg * reflAngle * F;
					
					Wgesd += Wd;
					Wgesg += Wg;
				}
			}
			
			Lod *= (float(SAMPLENUMBER) / validLightSamples);
			Log *= (float(SAMPLENUMBER) / validLightSamples);
		}
		
		Xpd = Wgesd > 0 ? Xpd / Wgesd : vec3(0);
		Xpg = Wgesg > 0 ? Xpg / Wgesg : vec3(0);
		
		Xpdq = Wgesd > 0 ? Xpdq / Wgesd : vec3(0);
		Xpgq = Wgesg > 0 ? Xpgq / Wgesg : vec3(0);
			
		float visibilityD = 1.0, visibilityG = 1.0;
		//calculateVisibility(cacheIndex, cache, Xpd, Xpg, Xpdq, Xpgq, visibilityD, visibilityG);
		
		vec3 lightDirD = Xpd - cache.position.xyz;
		float lightAngleD = max(dot(cache.normal.xyz, normalize(lightDirD)), 0.0001);

		imageStore(proxyLightPositionBuffer, ivec2(2 * texCoord.x, texCoord.y), vec4(Xpd, length(lightDirD)));
		imageStore(proxyLightLuminousFluxBuffer, ivec2(2 * texCoord.x, texCoord.y), vec4(visibilityD * (4.0 * PI * Lod * dot(lightDirD, lightDirD)) / (frd * lightAngleD), 0.0));

		vec3 lightDirG = Xpg - cache.position.xyz;
		float lightQuadDistance = dot(lightDirG, lightDirG);
		lightDirG = normalize(lightDirG);
		float reflAngleG = pow(max(dot(reflect(-lightDirG, cache.normal.xyz), camDir), 0.0001), cacheNormalMaterialData.w);
		//vec3 halfVector = (lightDirG + camDir) / length(lightDirG + camDir);
		//float reflAngleG = max(pow(dot(halfVector, cache.normal.xyz), cacheNormalMaterialData.w), 0.0001);
		float lightAngleG = max(dot(lightDirG, cache.normal.xyz), 0.0001);
		
		imageStore(proxyLightPositionBuffer, ivec2(2 * texCoord.x + 1, texCoord.y), vec4(Xpg, sqrt(lightQuadDistance)));
		imageStore(proxyLightLuminousFluxBuffer, ivec2(2 * texCoord.x + 1, texCoord.y), vec4(visibilityG * (4.0 * PI * Log * lightQuadDistance) / (frg * reflAngleG * lightAngleG), 0.0));
	}
}