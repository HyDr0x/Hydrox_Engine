#version 440 core

#include "../../HydroxShader/include/Shader/Shaderincludes/CameraUBO.glslh"

struct DrawElementsIndirectCommand
{
	uint primCount;//number of primitives
	uint instanceCount;
	uint firstIndex;
	uint baseVertex;
	uint baseInstance;
};

#define WORKGROUPSIZE 128

layout(r16ui, binding = 0) readonly uniform uimage2D voronoiDiagramImage;
layout(r32f, binding = 1) readonly uniform image2D triangleIndexImage;

layout(std430, binding = 0) buffer triangleIndexBuffer
{
	uint triangleIndices[];
};

layout(std430, binding = 1) buffer commandBuffer
{
	DrawElementsIndirectCommand command;
};

layout(local_size_x = WORKGROUPSIZE) in;

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	const uint pixelNumber = width * height;
	const uint pixelPerThread = uint(ceil(float(pixelNumber) / float(WORKGROUPSIZE * gl_NumWorkGroups.x)));
	const uint pixelOffset = idx * pixelPerThread;
	const uint pixelEnd = pixelOffset + pixelPerThread;
	
	if(idx == 0)
	{
		command.primCount = 3 * uint(imageLoad(triangleIndexImage, ivec2(width - 1, height - 1)).r);
	}
	
	for(uint i = pixelOffset; i < pixelEnd; i++)
	{
		ivec2 texCoord = ivec2(mod(i, width), i / width);
		
		if(texCoord.x + 1 >= width || texCoord.y + 1 >= height) continue;

		int indices[4];
		indices[0] = int(imageLoad(voronoiDiagramImage, texCoord).r);
		indices[1] = int(imageLoad(voronoiDiagramImage, ivec2(texCoord.x + 1, texCoord.y)).r);
		indices[2] = int(imageLoad(voronoiDiagramImage, ivec2(texCoord.x + 1, texCoord.y + 1)).r);
		indices[3] = int(imageLoad(voronoiDiagramImage, ivec2(texCoord.x, texCoord.y + 1)).r);

		uint offset = uint(imageLoad(triangleIndexImage, texCoord).r - 1);

		for(uint j = 0; j < 4; j += 2)//only need two tries! sample booth triangles in counter clockwise order to avoid culling!
		{
			uint index1 = uint(mod(j + 1, 4));
			uint index2 = uint(mod(j + 2, 4));
			if(indices[j] != indices[index1] && indices[j] != indices[index2] && indices[index1] != indices[index2])
			{
				triangleIndices[3 * offset] = indices[j];
				triangleIndices[3 * offset + 1] = indices[index1];
				triangleIndices[3 * offset + 2] = indices[index2];
				offset--;
			}
		}
	}
}