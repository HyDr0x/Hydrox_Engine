#version 440 core

#define HALFRESX
#define HALFRESY

#define WORKGROUPSIZE 128

#include "../../HydroxShader/include/Shader/Shaderincludes/CameraUBO.glslh"

layout(r32f, binding = 0) readonly uniform image2D cacheOffsetSampler;
layout(rgba32f, binding = 1) readonly uniform image2D cachePositionSampler;
layout(rgba32f, binding = 2) readonly uniform image2D cacheNormalSampler;

layout(std430, binding = 0) buffer specularCachePositionBuffer
{
	vec4 specularCachePositions[];
};

layout(std430, binding = 1) buffer specularCacheNormalMaterialBuffer
{
	vec4 specularCacheNormalMaterial[];
};

layout(local_size_x = WORKGROUPSIZE) in;

void main()
{
	const uint idx = gl_GlobalInvocationID.x;

	const uint edgeCacheNumber = uint(imageLoad(cacheOffsetSampler, ivec2(HALFRESX - 1, HALFRESY - 1)).r);
	
	const uint pixelNumber = HALFRESX * HALFRESY;
	const uint pixelPerThread = uint(ceil(float(pixelNumber) / float(WORKGROUPSIZE * gl_NumWorkGroups.x)));
	const uint pixelOffset = idx * pixelPerThread;
	const uint pixelEnd = pixelOffset + pixelPerThread;
	
	for(uint i = pixelOffset; i < pixelEnd; i++)
	{
		if(i >= pixelNumber)
		{
			return;
		}
	
		ivec2 texCoord = ivec2(mod(i, HALFRESX), i / HALFRESX);

		vec4 cacheNormal = imageLoad(cacheNormalSampler, texCoord);
		if(cacheNormal != vec4(0.0))
		{
			uint edgeCacheOffset = uint(imageLoad(cacheOffsetSampler, texCoord).r) - 1;

			specularCachePositions[edgeCacheOffset] = imageLoad(cachePositionSampler, texCoord);
			specularCacheNormalMaterial[edgeCacheOffset] = cacheNormal;
		}
	}
}