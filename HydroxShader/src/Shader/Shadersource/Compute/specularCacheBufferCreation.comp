#version 440 core

#define WORKGROUPSIZE 128

#include "../../../../include/Shader/Shaderincludes/CameraUBO.glslh"

layout(location = 0) uniform sampler2D gBufferDepthSampler;
layout(location = 1) uniform sampler2D gBufferNormalSampler;
layout(location = 2) uniform sampler2D gBufferMaterialSampler;

layout(r32f, binding = 0) readonly uniform image2D edgeCacheOffsetSampler;
layout(rgba32f, binding = 1) readonly uniform image2D edgeCachePositionSampler;
layout(rgba32f, binding = 2) readonly uniform image2D edgeCacheNormalSampler;

layout(std430, binding = 0) buffer specularCachePositionBuffer
{
	vec4 specularCachePositions[];
};

layout(std430, binding = 1) buffer specularCacheNormalMaterialBuffer
{
	vec4 specularCacheNormalMaterial[];
};

layout(local_size_x = WORKGROUPSIZE) in;

void main()
{
	const uint idx = gl_GlobalInvocationID.x;

	const uint edgeCacheNumber = uint(imageLoad(edgeCacheOffsetSampler, ivec2(width - 1, height - 1)).r);
	
	const uint pixelNumber = width * height;
	const uint pixelPerThread = uint(ceil(float(pixelNumber) / float(WORKGROUPSIZE * gl_NumWorkGroups.x)));
	const uint pixelOffset = idx * pixelPerThread;
	const uint pixelEnd = pixelOffset + pixelPerThread;
	
	for(uint i = pixelOffset; i < pixelEnd; i++)
	{
		if(i >= pixelNumber)
		{
			return;
		}
	
		ivec2 texCoord = ivec2(mod(i, width), i / width);

		vec4 edgeCacheNormal = imageLoad(edgeCacheNormalSampler, texCoord);
		if(edgeCacheNormal.xyz != vec3(0.0))
		{
			uint edgeCacheOffset = uint(imageLoad(edgeCacheOffsetSampler, texCoord).r) - 1;

			vec4 projCoord = imageLoad(edgeCachePositionSampler, texCoord);
			
			specularCachePositions[edgeCacheOffset] = vec4(projCoord.xyz, projCoord.w);
			specularCacheNormalMaterial[edgeCacheOffset] = vec4(edgeCacheNormal.xyz, edgeCacheNormal.w);
			
			projCoord = viewProjectionMatrix * vec4(projCoord.xyz, 1.0);
			projCoord /= projCoord.w;
			ivec2 projTexCoord = ivec2((projCoord.xy * 0.5 + 0.5) * ivec2(width, height));
		}
	}
}