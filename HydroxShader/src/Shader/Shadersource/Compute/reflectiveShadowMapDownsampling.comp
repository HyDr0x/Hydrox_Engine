#version 440 core

#define WORKGROUPTILESIZE 64

layout(location = 0) uniform ivec2 sampleDirection;
layout(location = 1) uniform uint shadowMapResolution;
layout(location = 2) uniform uint reflectiveShadowMapResolution;
layout(location = 3) uniform uint minification;

layout(rgba32f, binding = 0) readonly uniform image2D readReflectiveShadowMapPositionSampler;
layout(rgba32f, binding = 1) readonly uniform image2D readReflectiveShadowMapNormalSampler;
layout(rgba32f, binding = 2) readonly uniform image2D readReflectiveShadowMapLuminousFluxSampler;
layout(rgba32f, binding = 3) writeonly uniform image2D writeReflectiveShadowMapPositionImage;
layout(rgba32f, binding = 4) writeonly uniform image2D writeReflectiveShadowMapNormalImage;
layout(rgba32f, binding = 5) writeonly uniform image2D writeReflectiveShadowMapLuminousFluxImage;

layout(local_size_x = WORKGROUPTILESIZE) in;

void main()
{
	const uint idx = gl_GlobalInvocationID.x;
	const uint localID = gl_LocalInvocationIndex;
	
	const uint threadNumber = WORKGROUPTILESIZE * gl_NumWorkGroups.x;
	
	uint newWidth = sampleDirection == ivec2(1, 0) ? shadowMapResolution : reflectiveShadowMapResolution;
	const uint pixelsPerThread = (newWidth * shadowMapResolution + (minification * threadNumber) - 1) / (minification * threadNumber);
	const uint pixelStartIndex = idx * pixelsPerThread;
	const uint pixelEndIndex = pixelStartIndex + pixelsPerThread;

	for(uint i = pixelStartIndex; i < pixelEndIndex; i++)
	{
		uint pixelID = minification * i;
		ivec2 texCoord = ivec2(sampleDirection.x * mod(pixelID, newWidth) + sampleDirection.y * pixelID / shadowMapResolution, sampleDirection.x * (pixelID / newWidth) + sampleDirection.y * mod(pixelID, shadowMapResolution));
		
		vec4 position = vec4(0.0);
		vec4 normal = vec4(0.0);
		vec4 luminousFlux = vec4(0.0);
		
		for(uint j = 0; j < minification; j++)
		{
			vec4 pos = imageLoad(readReflectiveShadowMapPositionSampler, texCoord);
			
			if(pos.w == 1.0)
			{
				position += pos;
				normal += imageLoad(readReflectiveShadowMapNormalSampler, texCoord);
				luminousFlux += imageLoad(readReflectiveShadowMapLuminousFluxSampler, texCoord);
			}
			
			texCoord += sampleDirection;
		}
	
		ivec2 downSampledTexCoord = ivec2(mod(i, reflectiveShadowMapResolution), i / reflectiveShadowMapResolution);
	
		if(sampleDirection == ivec2(0, 1))
		{
			downSampledTexCoord = ivec2(i / reflectiveShadowMapResolution, mod(i, reflectiveShadowMapResolution));
		}
		
		position /= minification;
		normal /= minification;
		luminousFlux /= minification;

		imageStore(writeReflectiveShadowMapPositionImage, downSampledTexCoord, position);
		imageStore(writeReflectiveShadowMapNormalImage, downSampledTexCoord, normal);
		imageStore(writeReflectiveShadowMapLuminousFluxImage, downSampledTexCoord, luminousFlux);
	}
}