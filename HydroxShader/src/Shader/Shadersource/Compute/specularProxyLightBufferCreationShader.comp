#version 440 core

#define HALFRESX
#define HALFRESY

#define SAMPLENUMBER
#define SHADOWSAMPLENUMBER
#define SHADOWSAMPLENUMBERROOT
#define WORKGROUPSIZE 128

#include "../../HydroxShader/include/Shader/Shaderincludes/CacheData.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/CameraUBO.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/Encodings.glslh"
#include "../../HydroxShader/include/Shader/Shaderincludes/ParaboloidProjection.glslh"

layout(location = 0) uniform sampler2DArray indirectLightPosSampler;
layout(location = 1) uniform sampler2DArray indirectLightNormalAreaSampler;
layout(location = 2) uniform sampler2DArray indirectLightLuminousFluxSampler;
layout(location = 3) uniform sampler2DArray indirectShadowMapSampler;
layout(location = 4) uniform sampler1DArray valQuaternionsSampler;

layout(location = 5) uniform uint reflectiveShadowMapNumber;
layout(location = 6) uniform uint rsmTexRes;
layout(location = 7) uniform uint reflectiveShadowMapResolution;
layout(location = 8) uniform uint indirectShadowLightRatio;

layout(r32f, binding = 0) readonly uniform image2D edgeCacheOffsetSampler;

layout(std430, binding = 0) buffer specularCachePositionBuffer
{
	vec4 specularCachePositions[];
};

layout(std430, binding = 1) buffer specularCacheNormalMaterialBuffer
{
	vec4 specularCacheNormals[];
};

layout(std430, binding = 2) buffer proxyLightPositionBuffer
{
	vec4 proxyLightPosition[];
};

layout(std430, binding = 3) buffer proxyLightLuminousFluxBuffer
{
	vec4 proxyLightLuminousFlux[];
};

layout(local_size_x = WORKGROUPSIZE) in;

shared vec4 indirectLightPos[WORKGROUPSIZE];
shared vec4 indirectLightNormalArea[WORKGROUPSIZE];
shared vec4 indirectLightLuminousFlux[WORKGROUPSIZE];

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	const uint cacheNumber = uint(imageLoad(edgeCacheOffsetSampler, ivec2(HALFRESX - 1, HALFRESY - 1)).r);
	
	const uint cachesPerThread = uint(ceil(float(cacheNumber) / float(WORKGROUPSIZE * gl_NumWorkGroups.x)));
	const uint cacheOffset = idx * cachesPerThread;
	const uint cacheEnd = cacheOffset + cachesPerThread;
	
	for(uint i = cacheOffset; i < cacheEnd; i++)
	{
		vec3 Lod = vec3(0.0), Xpd = vec3(0.0);
		vec3 Log = vec3(0.0), Xpg = vec3(0.0);
		
		float Wgesd = 0.0;
		float Wgesg = 0.0;
		
		CacheData cache;
		vec3 cacheMaterial;
		float frd, frg;
		vec3 camDir;
		
		if(i < cacheNumber)
		{
			vec4 cacheNormalMaterial = specularCacheNormals[i];
			cache.position = specularCachePositions[i];
			cache.normal.xyz = normalize(decodeNormal(cacheNormalMaterial.xy));

			cacheMaterial = vec3(cache.position.w, cacheNormalMaterial.zw);

			frd = cacheMaterial.x / PI;
			frg = cacheMaterial.y * (cacheMaterial.z + 2.0) / (2.0 * PI);
			
			camDir = normalize(eyePos.xyz - cache.position.xyz);
		}
		
		float visibleIndirectLightNumber = 0.0;
		
		for(uint k = 0; k < reflectiveShadowMapNumber; k++)
		{
			float validLightSamples = 0.0;
			const uint cacheLoops = uint((SAMPLENUMBER + WORKGROUPSIZE - 1)/ WORKGROUPSIZE);
			
			for(uint j = 0; j < cacheLoops; j++)
			{
				uint sampleIndex = gl_LocalInvocationID.x + j * WORKGROUPSIZE;
				
				if(sampleIndex < SAMPLENUMBER)
				{
					vec3 texCoords = vec3(mod(sampleIndex, rsmTexRes) / float(rsmTexRes), float(sampleIndex / rsmTexRes) / float(rsmTexRes), float(k) / float(reflectiveShadowMapNumber));
					
					indirectLightPos[gl_LocalInvocationID.x] = texture(indirectLightPosSampler, texCoords, 0);
					indirectLightNormalArea[gl_LocalInvocationID.x] = texture(indirectLightNormalAreaSampler, texCoords, 0);
					indirectLightLuminousFlux[gl_LocalInvocationID.x] = texture(indirectLightLuminousFluxSampler, texCoords, 0);
				}
			
				memoryBarrierShared();
				barrier();
			
				if(i < cacheNumber)
				{
					for(uint l = 0; l < WORKGROUPSIZE; l++)
					{
						uint valID = j * WORKGROUPSIZE + l;
						if(valID < SAMPLENUMBER)
						{
							vec4 lightPos = indirectLightPos[l];
							vec4 lightNormalArea = indirectLightNormalArea[l];
							vec3 luminousFlux = indirectLightLuminousFlux[l].rgb;
						
							validLightSamples += max(lightPos.w, 0.0);//cancels indirect lightsources which aren't initialized, because there is no geometry behind or lit

							vec3 lightNormal = normalize(lightNormalArea.xyz * 2.0 - 1.0);
							float lightArea = lightNormalArea.w;
							
							vec3 lightDir = lightPos.xyz - cache.position.xyz;
							float quadDistance = dot(lightDir, lightDir);
							lightDir = normalize(lightDir);
							
							float pixelSolidAngle = min(0.5 * lightArea / quadDistance, 0.002);
							
							float reflAngle = pow(clamp(dot(reflect(-lightDir, cache.normal.xyz), camDir) + pixelSolidAngle, 0.0, 1.0), cacheMaterial.z);

							float F = max(lightPos.w, 0.0) * (max(dot(lightNormal.xyz, normalize(cache.position.xyz - lightPos.xyz)), 0.0) * max(dot(cache.normal.xyz, lightDir), 0.0)) / (lightArea + PI * quadDistance);
							
							float Wd = F;
							float Wg = reflAngle * F;
							
							Xpd += Wd * lightPos.xyz;
							Xpg += Wg * lightPos.xyz;
													
							Lod += luminousFlux * frd * F;
							Log += luminousFlux * frg * reflAngle * F;
													
							Wgesd += Wd;
							Wgesg += Wg;
							
							if(mod(valID, indirectShadowLightRatio) == 0)
							{
								uint ismIndex = valID / indirectShadowLightRatio;
								vec4 q = texelFetch(valQuaternionsSampler, ivec2(ismIndex, k), 0);
								
								float clipDepth;
								vec3 transformedPosition = applyQuaternion(cache.position.xyz - lightPos.xyz, q);
								
								paraboloidProjection(transformedPosition, PARABOLOIDNEAR, PARABOLOIDFAR, transformedPosition, clipDepth);
								
								if(clipDepth > 0.01)
								{
									transformedPosition.xy = (transformedPosition.xy * 0.5 + 0.5) / float(SHADOWSAMPLENUMBERROOT);
									transformedPosition.z = transformedPosition.z * 0.5 + 0.5;
									
									transformedPosition.x += mod(ismIndex, SHADOWSAMPLENUMBERROOT) / float(SHADOWSAMPLENUMBERROOT);
									transformedPosition.y += (ismIndex / SHADOWSAMPLENUMBERROOT) / float(SHADOWSAMPLENUMBERROOT);

									float depth = texture(indirectShadowMapSampler, vec3(transformedPosition.xy, k)).r;

									//visibleIndirectLightNumber = depth;
									visibleIndirectLightNumber += max(lightPos.w, 0.0) * clamp(ceil(depth - transformedPosition.z + 0.01), 0, 1);
								}
							}
						}
					}
				}
				
				memoryBarrierShared();
				barrier();
			}

			Lod *= (float(SAMPLENUMBER) / validLightSamples);
			Log *= (float(SAMPLENUMBER) / validLightSamples);
		}
		
		visibleIndirectLightNumber /= (reflectiveShadowMapNumber * SHADOWSAMPLENUMBER);
		//visibleIndirectLightNumber = 1.0;
		
		if(i < cacheNumber)
		{
			Xpd = Wgesd > 0 ? Xpd / Wgesd : vec3(0);
			Xpg = Wgesg > 0 ? Xpg / Wgesg : vec3(0);
			
			vec3 lightDirD = Xpd - cache.position.xyz;
			float lightAngleD = max(dot(normalize(lightDirD), cache.normal.xyz), 0.0001);

			proxyLightPosition[2 * i] = vec4(Xpd, length(lightDirD));
			proxyLightLuminousFlux[2 * i] = vec4(visibleIndirectLightNumber * (4.0 * PI * Lod * dot(lightDirD, lightDirD)) / max(frd * lightAngleD, 0.0001), 0.0);

			vec3 lightDirG = Xpg - cache.position.xyz;
			float lightQuadDistance = dot(lightDirG, lightDirG);
			lightDirG = normalize(lightDirG);
			float reflAngleG = max(pow(dot(reflect(-lightDirG, cache.normal.xyz), camDir), cacheMaterial.z), 0.0001);
			float lightAngleG = max(dot(lightDirG, cache.normal.xyz), 0.0001);
			
			proxyLightPosition[2 * i + 1] = vec4(Xpg, sqrt(lightQuadDistance));
			proxyLightLuminousFlux[2 * i + 1] = vec4(visibleIndirectLightNumber * (4.0 * PI * Log * lightQuadDistance) / max(frg * reflAngleG * lightAngleG, 0.0001), 0.0);
		}
	}
}